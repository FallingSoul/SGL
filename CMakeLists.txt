cmake_minimum_required(VERSION 3.5)
project(SGL VERSION 0.0.1 LANGUAGES CXX C)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR}/build/${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}/Debug")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR}/build/${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}/Debug")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR}/build/${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}/Debug")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR}/build/${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}/Release")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR}/build/${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}/Release")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR}/build/${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}/Release")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL "${PROJECT_SOURCE_DIR}/build/${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}/MinSizeRel")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL "${PROJECT_SOURCE_DIR}/build/${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}/MinSizeRel")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL "${PROJECT_SOURCE_DIR}/build/${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}/MinSizeRel")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO "${PROJECT_SOURCE_DIR}/build/${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}/RelWithDegInfo")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO "${PROJECT_SOURCE_DIR}/build/${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}/RelWithDegInfo")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO "${PROJECT_SOURCE_DIR}/build/${CMAKE_CXX_COMPILER_ID}${CMAKE_CXX_COMPILER_VERSION}/RelWithDegInfo")



# for third-party libraries
add_subdirectory("${PROJECT_SOURCE_DIR}/third-party")



set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

file(GLOB_RECURSE ${PROJECT_NAME}_HEADERS "${PROJECT_SOURCE_DIR}/inc/*.*")
file(GLOB_RECURSE ${PROJECT_NAME}_SOURCES "${PROJECT_SOURCE_DIR}/src/*.*")

message("---- Headers ----")
foreach(X ${${PROJECT_NAME}_HEADERS})
    file(RELATIVE_PATH Y ${PROJECT_SOURCE_DIR} ${X})
    message("\t${Y}")
endforeach()

message("---- Sources ----")
foreach(X ${${PROJECT_NAME}_SOURCES})
    file(RELATIVE_PATH Y ${PROJECT_SOURCE_DIR} ${X})
    message("\t${Y}")
endforeach()

set(SGL_LIBRARY ${PROJECT_NAME})
add_library(${SGL_LIBRARY} SHARED ${${PROJECT_NAME}_SOURCES} ${${PROJECT_NAME}_HEADERS})
# include
target_include_directories(${SGL_LIBRARY} PUBLIC "${PROJECT_SOURCE_DIR}/inc/")
# define version numbers
target_compile_definitions(${SGL_LIBRARY}
    PRIVATE ${SGL_LIBRARY}_BUILD
    PUBLIC ${SGL_LIBRARY}_VERSION_MAJOR=${PROJECT_VERSION_MAJOR}
    PUBLIC ${SGL_LIBRARY}_VERSION_MINOR=${PROJECT_VERSION_MINOR}
    PUBLIC ${SGL_LIBRARY}_VERSION_PATCH=${PROJECT_VERSION_PATCH})
# link libraries
target_link_libraries(${SGL_LIBRARY} ${THIRDPARTY_LIBRARIES})
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    target_link_libraries(${SGL_LIBRARY} stdc++)
endif()

if(EXISTS "${PROJECT_SOURCE_DIR}/test")
    add_subdirectory("${PROJECT_SOURCE_DIR}/test")
endif()